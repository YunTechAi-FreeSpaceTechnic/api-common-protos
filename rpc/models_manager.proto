syntax = "proto3";

package rpc.models_manager;

import "google/protobuf/empty.proto";
import "rpc/common.proto";

message DockerContainer {
  string name = 1;
  string tag = 2;
  string env_file_path = 3;
  bool usage_other_service = 4;
}

message AttackModelRequest {
  repeated rpc.common.ModelInfo specify = 1;
  string chat_id = 2;
}

message Model {
  string host = 1;
  int32 port = 2;
  rpc.common.Entity entity = 3;

  bool disable = 4;
  optional string docker_image = 5;
  optional string env_file_path = 6;
}

message AllModels {
  repeated Model models = 1;
}

message AllModelsInfo {
  repeated rpc.common.ModelInfo models = 1;
}

message SetModelServerStatusRequest {
  rpc.common.ModelInfo info = 1;
  bool online = 2;
}

message AttackModelResponse {
  repeated float result = 1;
  rpc.common.ModelType response_type = 2;
}

message Label {
  optional string question = 1;
  string answer = 2;
}

message Labels {
  repeated Label labels = 1;
}

service ModelsManagerService {
  // Model manager
  rpc AddModelServer(DockerContainer) returns (google.protobuf.Empty);

  // Database Model data
  rpc GetAllModels(google.protobuf.Empty) returns (AllModels);

  rpc GetModelInfo(rpc.common.Entity) returns (rpc.common.ModelInfo);

  rpc SetModelServerStatus(SetModelServerStatusRequest) returns (google.protobuf.Empty);
  // Model info
  rpc GetAllModelsInfo(google.protobuf.Empty) returns (AllModelsInfo);

  rpc GetAllLabels(google.protobuf.Empty) returns (Labels);

  rpc AttackModel(AttackModelRequest) returns (AttackModelResponse);
}
